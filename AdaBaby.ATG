COMPILER ada

// Return the n-th token after the current lookahead token
Token peek(int n) {
  scanner.ResetPeek();
  Token x = la;
  while (n > 0) { x = scanner.Peek(); n--; }
  return x;
}

Object getKind(int t)
{
java.util.Set<java.util.Map.Entry> entries = Scanner.literals.entrySet();
for(java.util.Map.Entry entry : entries) {
   if(entry.getValue().equals(t)) {
       return entry.getKey();
   }
}
return null;
}

class ExprKind {
	static final int NONE     =  0;
	static final int CONDEXPR = 17;
	static final int APPLY    = 25;
	static final int NEWCLASS = 26;
	static final int NEWARRAY = 27;
	static final int PARENS   = 28;
	static final int ASSIGN   = 29;
	static final int TYPECAST = 30;
	static final int TYPETEST = 31;
	static final int SELECT   = 33;
	static final int IDENT    = 34;
	static final int LITERAL  = 35;
	static final int POS      = 41;
	static final int NEG      = 42;
	static final int NOT      = 43;
	static final int COMPL    = 44;
	static final int PREINC   = 45;
	static final int PREDEC   = 46;
	static final int POSTINC  = 47;
	static final int POSTDEC  = 48;
	static final int BINARY   = 50;
}

CHARACTERS
	tab           = '\u0009'. /*  9 = tabulator */
	lf            = '\u000a'. /* 10 = line feed */
	cr            = '\u000d'. /* 13 = carriage return */
	zero          = '0'.
	zeroToThree   = zero + "123" .
	octalDigit    = zero + "1234567" . 
	nonZeroDigit  = "123456789".
	digit         = '0' + nonZeroDigit .
	hexDigit      = digit + "ABCDEFabcdef" .
	letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.
	char          = ANY - "'" - '\\' - cr - lf.
	stringChar    = ANY - cr - lf.
TOKENS
	ident         = letter { ['_'] ( letter | digit ) }.
	/*-------------------------------------------------------------------------*/
	intLit = 
		(  zero | nonZeroDigit { digit }
		| ( "0x" | "0X" ) hexDigit { hexDigit }
		| '0' octalDigit { octalDigit }
		) [ "l" | "L" ].
	/*-------------------------------------------------------------------------*/
	floatLit =
		"." digit {digit} 
		[("e" | "E") ["+" | "-"] digit {digit}] 
		[ "F" | "f" | "D" | "d" ]
	| digit {digit} 
		( "." {digit} 
		[("e" | "E" ) ["+" | "-"] digit {digit} ] 
		[ "F" | "f" | "D" | "d" ]
		| ("e" | "E") ["+" | "-"] digit {digit}
		[ "F" | "f" | "D" | "d" ]
		| "F" | "f" | "D" | "d"
		).  
	/*-------------------------------------------------------------------------*/
	charLit = 
		"'" ( char
			| "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
				| "u" { "u" } hexDigit hexDigit hexDigit hexDigit
				| zeroToThree [ octalDigit ] [ octalDigit ]
				| octalDigit [ octalDigit ]
				)
			) 
		"'".
	/*-------------------------------------------------------------------------*/
	stringLit = 
		"\"" { stringChar
			| "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
					| "u" { "u" } hexDigit hexDigit hexDigit hexDigit
					| zeroToThree [ octalDigit ] [ octalDigit ]
					| octalDigit [ octalDigit ]
					)
			} 
	"\"".

	/*----- keyword names needed in LL(1) resolvers -----*/
	subtype 	= "subtype".
	record 		= "record".
	range 		= "range".
	is 			= "is".
	loop 		= "loop".
	while 		= "while".
	for 		= "for".
	begin 		= "begin".
	end 		= "end".
	procedure 	= "procedure".
	function 	= "function".
	package 	= "package".
	use 		= "use".
	with 		= "with".
	of			= "of".
	array		= "array".

	/*-------------- Types for productions  ------------*/
	integer = "Integer".
	string 	= "String".
	boolean = "Boolean".
	float 	= "float".
	null 	= "null".
	char	= "Character".
	
  	/*----- operators and special characters needed in LL(1) resolvers --------------*/
	colon   = ":".
	semicolon = ";".
	comma   = ",".
	dot     = ".".
	self    = "@".
	lbrace  = "{".
	lbrack  = "[".
	lpar    = "(".
	mult	= "*".
	and 	= "and".
	not     = "not".
	minus 	= "-".
	plus    = "+".
	rbrace  = "}".
	rbrack  = "]".
	rpar    = ")".
	tilde   = "~".

COMMENTS FROM "--" TO lf
IGNORE lf + cr

PRODUCTIONS
    ada	 	= 	(. System.out.println("ADASTART"); .) 		
				pdecl
				(. System.out.println("Declarations:"); .)	
				{decl semicolon (. System.out.print(t.val + "\n"); .)}
				begin		(. System.out.print(t.val + "\n"); .)
				(. System.out.println("Statements:"); .)
				{stmt semicolon 	(. System.out.print(t.val + "\n"); .)}
				pend	
				semicolon	(. System.out.print(t.val + "\n"); .)
				(. System.out.println("ADASTOP"); .).
	pdecl	=	procedure (. System.out.print("\t" + t.val + " "); .)
				ident 	  (. System.out.print(t.val + " "); .)
				is 		  (. System.out.print(t.val + "\n"); .).
	pend	= 	end			(. System.out.print("\t" + t.val + " "); .)
				ident 		(. System.out.print(t.val); .).
	decl	= 	
				ident 	(. System.out.print("\t" + t.val); .) 				
				{',' 	(. System.out.print(t.val + " "); .)			
				ident 	(. System.out.print(t.val); .)			
				}
				colon 	(. System.out.print(t.val + " "); .)			
				type 	(. System.out.print(t.val); .)			
				[":=" 	(. System.out.print(" " + t.val + " "); .)
				expr].
	type	= (integer 				
			| string				
			| boolean				
			| float					
			| char).

	stmt 	= 	(null
				| assign).
	assign	=	
				ident (. System.out.print("\t" + t.val); .)
				":=" (. System.out.print(t.val); .)
				expr.
	/*-----------------------------------------------------*/
    expr
			= 
			Term 
			{ AddOp 
			Term}. 
	/*-----------------------------------------------------*/
	Term=	Factor
				{MulOp
				Factor}.
	/*-----------------------------------------------------*/
	Factor	= intLit (. System.out.print(t.val); .) 																
			| "true" (. System.out.println(getKind(t.kind) + " = " + t.val); .) 						
			| "false" (. System.out.println(getKind(t.kind) + " = " + t.val); .).
	/*-----------------------------------------------------*/
	AddOp	=	( plus | minus )  (. System.out.print(" " + t.val + " "); .).
	/*-----------------------------------------------------*/
	MulOp	=	mult  (. System.out.println(getKind(t.kind) + " = " + t.val); .).
	/*-----------------------------------------------------*/
END ada.

